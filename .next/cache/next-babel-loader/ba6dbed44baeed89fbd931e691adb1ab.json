{"ast":null,"code":"import _parseFloat from \"@babel/runtime-corejs2/core-js/parse-float\";\nvar __jsx = React.createElement;\n\n/* eslint-disable react/jsx-one-expression-per-line */\nimport React, { useEffect, useState } from 'react';\nimport { Button, CircularProgress, Dialog, DialogContent, Typography } from '@material-ui/core';\nimport { useMutation, useQuery } from '@apollo/react-hooks';\nimport { CHECKOUT_LINE_ITEMS_REPLACE_MUTATION, GET_CART_QUERY } from '../CartController/_types';\nimport { Styled } from './_styles';\n// Map line items to array for cart replacement\nexport function getLineItems(lineItems) {\n  return lineItems.map(({\n    node\n  }) => ({\n    variantId: node.variant.id,\n    quantity: node.quantity\n  }));\n}\n\nconst ProductDetail = ({\n  product\n}) => {\n  const {\n    0: cartToken,\n    1: setCartToken\n  } = useState(null);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false); // Gets cart info to replace item if added to cart\n\n  const {\n    data: getCartData,\n    loading: getCartLoading,\n    error: getCartError\n  } = useQuery(GET_CART_QUERY, {\n    variables: {\n      checkoutId: cartToken\n    }\n  }); // Mutation replaces items in cart\n\n  const [replaceItems, {\n    data: replaceItemsData,\n    loading: replaceItemsLoading,\n    error: replaceItemsError\n  }] = useMutation(CHECKOUT_LINE_ITEMS_REPLACE_MUTATION, {\n    variables: {\n      checkoutId: cartToken,\n      lineItems: getLineItems(getCartData ? getCartData.node.lineItems.edges : [])\n    }\n  }); // onClick function for Add to Cart button\n  //  Gets cart items first, turns into an array,\n  //  pushes new item and replaces items in cart\n\n  const addToCart = () => {\n    if (cartToken && getCartData) {\n      setLoading(true);\n      getLineItems(getCartData.node.lineItems.edges).push({\n        variantId: product.variants.edges[0].node.id,\n        quantity: 1\n      });\n      replaceItems().then(res => {\n        setLoading(false);\n      });\n    } else {// console.log(\"Can't add to cart.\");\n    }\n  }; // Waits for 'window' object to be availble for localStorage\n\n\n  useEffect(() => {\n    if (window.localStorage) {\n      setCartToken(window.localStorage.getItem('shopifyCartToken'));\n    }\n  }, [cartToken]);\n  return __jsx(Styled.ProductDetailContainer, null, __jsx(Styled.ImageContainer, null, __jsx(Styled.ProductImage, {\n    src: product.imageSrc,\n    alt: \"PDP\"\n  })), __jsx(Styled.DescriptionContainer, null, __jsx(Styled.ProductTitle, {\n    variant: \"h5\"\n  }, product.title), __jsx(Styled.ProductDescription, {\n    variant: \"body2\"\n  }, product.description), __jsx(Styled.ATCContainer, null, __jsx(Typography, {\n    variant: \"body1\"\n  }, \"Price: $\", _parseFloat(product.price).toFixed(2)), __jsx(Button, {\n    onClick: addToCart,\n    variant: \"contained\",\n    color: \"secondary\"\n  }, \"Add to cart\"))), __jsx(Dialog, {\n    open: loading\n  }, __jsx(DialogContent, null, __jsx(Typography, {\n    variant: \"h6\"\n  }, \"Adding item to cart...\"), __jsx(Styled.ProgressContainer, null, __jsx(CircularProgress, null)))));\n};\n\nexport default ProductDetail;","map":{"version":3,"sources":["E:/current-work/web/react.js/react-next-store/components/ProductDetail/ProductDetail.tsx"],"names":["React","useEffect","useState","Button","CircularProgress","Dialog","DialogContent","Typography","useMutation","useQuery","CHECKOUT_LINE_ITEMS_REPLACE_MUTATION","GET_CART_QUERY","Styled","getLineItems","lineItems","map","node","variantId","variant","id","quantity","ProductDetail","product","cartToken","setCartToken","loading","setLoading","data","getCartData","getCartLoading","error","getCartError","variables","checkoutId","replaceItems","replaceItemsData","replaceItemsLoading","replaceItemsError","edges","addToCart","push","variants","then","res","window","localStorage","getItem","imageSrc","title","description","price","toFixed"],"mappings":"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","sourcesContent":["/* eslint-disable react/jsx-one-expression-per-line */\r\nimport React, { FunctionComponent, useEffect, useState } from 'react';\r\nimport {\r\n  Button, CircularProgress, Dialog, DialogContent, Typography,\r\n} from '@material-ui/core';\r\nimport { useMutation, useQuery } from '@apollo/react-hooks';\r\nimport { LineItem, TransformedProduct } from '../PDPComponent/_types';\r\nimport { CHECKOUT_LINE_ITEMS_REPLACE_MUTATION, GET_CART_QUERY, GetCartResponse } from '../CartController/_types';\r\nimport { Styled } from './_styles';\r\n\r\ntype Props = {\r\n  product: TransformedProduct;\r\n};\r\n\r\n// Map line items to array for cart replacement\r\nexport function getLineItems(lineItems): LineItem[] {\r\n  return lineItems.map(({ node }): LineItem => (\r\n    { variantId: node.variant.id, quantity: node.quantity }\r\n  ));\r\n}\r\n\r\nconst ProductDetail: FunctionComponent<Props> = ({ product }: Props) => {\r\n  const [cartToken, setCartToken] = useState<string>(null);\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n\r\n  // Gets cart info to replace item if added to cart\r\n  const {\r\n    data: getCartData,\r\n    loading: getCartLoading,\r\n    error: getCartError,\r\n  } = useQuery(GET_CART_QUERY, {\r\n    variables: {\r\n      checkoutId: cartToken,\r\n    },\r\n  });\r\n\r\n  // Mutation replaces items in cart\r\n  const [replaceItems, {\r\n    data: replaceItemsData,\r\n    loading: replaceItemsLoading,\r\n    error: replaceItemsError,\r\n  }] = useMutation(CHECKOUT_LINE_ITEMS_REPLACE_MUTATION, {\r\n    variables: {\r\n      checkoutId: cartToken,\r\n      lineItems: getLineItems(getCartData\r\n        ? getCartData.node.lineItems.edges\r\n        : []),\r\n    },\r\n  });\r\n\r\n  // onClick function for Add to Cart button\r\n  //  Gets cart items first, turns into an array,\r\n  //  pushes new item and replaces items in cart\r\n  const addToCart = () => {\r\n    if (cartToken && getCartData) {\r\n      setLoading(true);\r\n      getLineItems(getCartData.node.lineItems.edges).push({\r\n        variantId: product.variants.edges[0].node.id,\r\n        quantity: 1,\r\n      });\r\n      replaceItems().then((res) => {\r\n        setLoading(false);\r\n      });\r\n    } else {\r\n      // console.log(\"Can't add to cart.\");\r\n    }\r\n  };\r\n\r\n  // Waits for 'window' object to be availble for localStorage\r\n  useEffect(() => {\r\n    if (window.localStorage) {\r\n      setCartToken(window.localStorage.getItem('shopifyCartToken'));\r\n    }\r\n  }, [cartToken]);\r\n\r\n  return (\r\n    <Styled.ProductDetailContainer>\r\n      <Styled.ImageContainer>\r\n        <Styled.ProductImage src={product.imageSrc} alt=\"PDP\" />\r\n      </Styled.ImageContainer>\r\n      <Styled.DescriptionContainer>\r\n        <Styled.ProductTitle variant=\"h5\">{product.title}</Styled.ProductTitle>\r\n        <Styled.ProductDescription variant=\"body2\">{product.description}</Styled.ProductDescription>\r\n        <Styled.ATCContainer>\r\n          <Typography variant=\"body1\">\r\n            Price: ${parseFloat(product.price).toFixed(2)}\r\n          </Typography>\r\n          <Button onClick={addToCart} variant=\"contained\" color=\"secondary\">Add to cart</Button>\r\n        </Styled.ATCContainer>\r\n      </Styled.DescriptionContainer>\r\n      <Dialog open={loading}>\r\n        <DialogContent>\r\n          <Typography variant=\"h6\">Adding item to cart...</Typography>\r\n          <Styled.ProgressContainer>\r\n            <CircularProgress />\r\n          </Styled.ProgressContainer>\r\n        </DialogContent>\r\n      </Dialog>\r\n    </Styled.ProductDetailContainer>\r\n  );\r\n};\r\n\r\nexport default ProductDetail;\r\n"]},"metadata":{},"sourceType":"module"}